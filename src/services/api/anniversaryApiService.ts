/**
 * Anniversary API Service
 * Centralized service for anniversary event generation
 */

import { prisma } from '@/lib/prisma';
import { CompanyAnniversaryService } from '@/services/business/companyAnniversaryService';

export interface AnniversaryApiOptions {
  userId: string;
  days?: number;
  startDate?: Date;
  endDate?: Date;
  companyId?: number;
}

export class AnniversaryApiService {
  
  /**
   * Get upcoming anniversary events for a user
   */
  static async getUpcomingAnniversaryEvents(options: AnniversaryApiOptions) {
    const { userId, days = 60, startDate, endDate, companyId } = options;
    
    // Calculate date range
    const start = startDate || new Date();
    const end = endDate || (() => {
      const date = new Date();
      date.setDate(date.getDate() + days);
      return date;
    })();

    // Get all active companies or filter by specific company
    const whereClause = companyId ? 
      { id: companyId, status: 'Active' } : 
      { status: 'Active' };

    const companies = await prisma.company.findMany({
      where: whereClause,
      select: {
        id: true,
        tradingName: true,
        registrationDate: true,
        status: true
      }
    });

    // Get deleted anniversary event IDs for this specific user
    const deletedEventIds = await prisma.autoGeneratedEventSync.findMany({
      where: { 
        isDeleted: true,
        userId: userId
      },
      select: { originalEventId: true }
    });
    const deletedEventIdsSet = new Set(deletedEventIds.map(e => e.originalEventId));

    // Generate anniversary events
    const anniversaryEvents = CompanyAnniversaryService.generateAnniversaryEventsForCompanies(
      companies,
      start,
      end,
      Array.from(deletedEventIdsSet) // Filter out deleted events
    );

    console.log('Anniversary API Service: Generated events:', {
      userId,
      startDate: start.toISOString(),
      endDate: end.toISOString(),
      companiesCount: companies.length,
      anniversaryEventsCount: anniversaryEvents.length,
      deletedEventIdsCount: deletedEventIdsSet.size,
      companyFilter: companyId || 'all'
    });

    // Convert to calendar event format
    const calendarEvents = anniversaryEvents.map(event => 
      CompanyAnniversaryService.convertToCalendarEvent(event)
    );

    return {
      events: calendarEvents,
      metadata: {
        startDate: start.toISOString(),
        endDate: end.toISOString(),
        totalEvents: calendarEvents.length,
        companiesProcessed: companies.length,
        deletedEventsFiltered: deletedEventIdsSet.size
      }
    };
  }
}