import { NextRequest, NextResponse } from 'next/server';
import { authenticateRequest } from '@/lib/api-auth';
import { AnniversaryEventService } from '@/services/business/anniversaryEventService';

// POST /api/calendar/anniversary-events/init - Initialize anniversary events for a user
// This endpoint is called when a user first accesses the calendar to ensure anniversary events exist
export async function POST(request: NextRequest) {
  try {
    const { user: currentUser, error } = await authenticateRequest();
    if (error) return error;
    if (!currentUser) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });

    // Get user from database
    const { prisma } = require('@/lib/prisma');
    const user = await prisma.user.findUnique({
      where: { email: currentUser.email },
      select: { id: true }
    });

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // Check if anniversary events already exist
    const existingCount = await prisma.calendarEvent.count({
      where: {
        isAutoGenerated: true,
        type: 'ANNIVERSARY'
      }
    });

    if (existingCount > 0) {
      return NextResponse.json({
        success: true,
        message: 'Anniversary events already initialized',
        alreadyInitialized: true,
        existingCount
      });
    }

    // Generate anniversary events for the next 2 years
    const startDate = new Date();
    const endDate = new Date();
    endDate.setFullYear(endDate.getFullYear() + 2);

    console.log(`Initializing anniversary events for user ${user.id} for period ${startDate.toISOString()} to ${endDate.toISOString()}`);

    const result = await AnniversaryEventService.generateAndStoreAllAnniversaryEvents(
      startDate,
      endDate,
      user.id
    );

    return NextResponse.json({
      success: true,
      message: 'Anniversary events initialized successfully',
      alreadyInitialized: false,
      created: result.totalCreated,
      skipped: result.totalSkipped,
      errors: result.errors
    });
  } catch (error) {
    console.error('Error initializing anniversary events:', error);
    return NextResponse.json(
      { error: 'Failed to initialize anniversary events' },
      { status: 500 }
    );
  }
}