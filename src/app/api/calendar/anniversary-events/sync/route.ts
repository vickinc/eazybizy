import { NextRequest, NextResponse } from 'next/server';
import { AnniversaryEventService } from '@/services/business/anniversaryEventService';

// POST /api/calendar/anniversary-events/sync - Scheduled sync of anniversary events
// This endpoint can be called by a cron job or scheduled task
export async function POST(request: NextRequest) {
  try {
    // Verify the request is coming from a scheduled job (optional security check)
    const authHeader = request.headers.get('authorization');
    const expectedToken = process.env.CRON_SECRET || 'fallback-secret';
    
    if (authHeader !== `Bearer ${expectedToken}`) {
      console.warn('Unauthorized anniversary sync attempt');
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json().catch(() => ({}));
    const { 
      startDate, 
      endDate,
      cleanup = false 
    } = body;

    // Default to syncing the next 2 years of anniversary events
    const start = startDate ? new Date(startDate) : new Date();
    const end = endDate ? new Date(endDate) : (() => {
      const date = new Date();
      date.setFullYear(date.getFullYear() + 2);
      return date;
    })();

    console.log(`Starting scheduled anniversary event sync: ${start.toISOString()} to ${end.toISOString()}`);

    // Optional cleanup of old events
    let cleanupResult = null;
    if (cleanup) {
      cleanupResult = await AnniversaryEventService.cleanupOldAnniversaryEvents();
      console.log(`Cleanup completed: ${cleanupResult.deleted} events deleted`);
    }

    // Sync anniversary events
    const syncResult = await AnniversaryEventService.syncAnniversaryEventsForPeriod(
      start,
      end
    );

    const response = {
      success: syncResult.success,
      message: syncResult.message,
      stats: syncResult.stats,
      period: {
        start: start.toISOString(),
        end: end.toISOString()
      },
      ...(cleanupResult && {
        cleanup: {
          deleted: cleanupResult.deleted,
          errors: cleanupResult.errors
        }
      }),
      timestamp: new Date().toISOString()
    };

    console.log('Anniversary event sync completed:', response);

    return NextResponse.json(response);
  } catch (error) {
    console.error('Scheduled anniversary event sync failed:', error);
    return NextResponse.json(
      { 
        error: 'Sync failed',
        message: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}

// GET /api/calendar/anniversary-events/sync - Get sync status and stats
export async function GET() {
  try {
    // Get upcoming events to show current state
    const upcomingEvents = await AnniversaryEventService.getUpcomingAnniversaryEvents();
    
    // Get total count of auto-generated events
    const { prisma } = require('@/lib/prisma');
    const totalAnniversaryEvents = await prisma.calendarEvent.count({
      where: {
        isAutoGenerated: true,
        type: 'ANNIVERSARY'
      }
    });

    const response = {
      success: true,
      stats: {
        totalAnniversaryEvents,
        upcomingEvents: upcomingEvents.length
      },
      upcomingEvents: upcomingEvents.slice(0, 5), // Show next 5 events
      timestamp: new Date().toISOString()
    };

    return NextResponse.json(response);
  } catch (error) {
    console.error('Failed to get anniversary sync status:', error);
    return NextResponse.json(
      { 
        error: 'Failed to get sync status',
        message: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}