generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    Int                 @id @default(autoincrement())
  legalName             String
  tradingName           String
  registrationNo        String              @unique
  registrationDate      DateTime
  countryOfRegistration String
  baseCurrency          String
  businessLicenseNr     String?
  vatNumber             String?
  industry              String
  entityType            String?
  customEntityType      String?
  fiscalYearEnd         String?
  address               String
  phone                 String
  email                 String
  website               String
  status                String              @default("Active")
  logo                  String              @default("")
  facebookUrl           String?
  instagramUrl          String?
  xUrl                  String?
  youtubeUrl            String?
  whatsappNumber        String?
  telegramNumber        String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  mainContactEmail      String?
  mainContactType       String?
  bankAccounts          BankAccount[]
  bookkeepingEntries    BookkeepingEntry[]
  businessCards         BusinessCard[]
  calendarEvents        CalendarEvent[]
  chartOfAccounts       ChartOfAccount[]
  clients               Client[]
  companyAccounts       CompanyAccount[]
  companyMemberships    CompanyMembership[]
  digitalWallets        DigitalWallet[]
  initialBalances       InitialBalance[]
  invoices              Invoice[]
  notes                 Note[]
  paymentMethods        PaymentMethod[]
  products              Product[]
  representatives       Representative[]
  shareholders          Shareholder[]
  taxTreatments         TaxTreatment[]
  transactions          Transaction[]
  vendors               Vendor[]
  manualCashflowEntries ManualCashflowEntry[]

  @@index([createdAt, id])
  @@index([status, createdAt, id])
  @@index([industry, createdAt, id])
  @@index([legalName, createdAt, id])
  @@index([tradingName, createdAt, id])
  @@index([status])
  @@index([industry])
  @@index([email])
  @@index([registrationNo])
  @@index([status, industry])
  @@index([updatedAt])
  @@map("companies")
}

model Shareholder {
  id                 Int       @id @default(autoincrement())
  companyId          Int
  firstName          String
  lastName           String
  dateOfBirth        DateTime?
  nationality        String
  countryOfResidence String
  email              String
  phoneNumber        String
  ownershipPercent   Float
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@map("shareholders")
}

model Representative {
  id                 Int       @id @default(autoincrement())
  companyId          Int
  firstName          String
  lastName           String
  dateOfBirth        DateTime?
  nationality        String
  countryOfResidence String
  email              String
  phoneNumber        String
  role               String
  customRole         String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@map("representatives")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  username                String                   @unique
  fullName                String
  role                    String                   @default("VIEWER")
  isActive                Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  lastLoginAt             DateTime?
  passwordHash            String?
  emailVerified           Boolean                  @default(false)
  authId                  String?                  @unique
  googleId                String?                  @unique
  googleEmail             String?
  googleRefreshToken      String?
  googleAccessToken       String?
  googleTokenExpiry       DateTime?
  googleCalendarId        String?
  googleSyncEnabled       Boolean                  @default(false)
  lastGoogleSync          DateTime?
  timezoneId              String                   @default("UTC")
  timezoneMode            String?                  // 'device', 'google', 'custom' - null means not explicitly set
  googleAutoSyncEnabled   Boolean?
  googleDefaultCalendarId String?
  auditLogs               AuditLog[]
  autoGeneratedEventSyncs AutoGeneratedEventSync[]
  calendarEvents          CalendarEvent[]
  companyMemberships      CompanyMembership[]
  googleCalendarSyncs     GoogleCalendarSync[]
  updatedTransactions     Transaction[]            @relation("UpdatedByUser")
  createdTransactions     Transaction[]            @relation("CreatedByUser")

  @@index([email])
  @@index([authId])
  @@index([role])
  @@index([googleId])
  @@map("users")
}

model CompanyMembership {
  id        String   @id @default(cuid())
  userId    String
  companyId Int
  role      String   @default("VIEWER")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
  @@map("company_memberships")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  userName   String
  action     String
  entityType String
  entityId   String
  details    String
  timestamp  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([timestamp])
  @@map("audit_logs")
}

model Client {
  id                    String    @id @default(cuid())
  companyId             Int?
  clientType            String
  name                  String
  contactPersonName     String?
  contactPersonPosition String?
  email                 String
  phone                 String
  website               String    @default("")
  address               String
  city                  String
  zipCode               String
  country               String
  industry              String
  status                String    @default("ACTIVE")
  notes                 String    @default("")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastInvoiceDate       DateTime?
  totalInvoiced         Float     @default(0)
  totalPaid             Float     @default(0)
  registrationNumber    String?
  vatNumber             String?
  passportNumber        String?
  dateOfBirth           DateTime?
  company               Company?  @relation(fields: [companyId], references: [id])
  invoices              Invoice[]

  @@index([companyId, createdAt])
  @@index([status, createdAt])
  @@index([email])
  @@index([name])
  @@index([industry])
  @@index([clientType])
  @@index([companyId, status])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([totalInvoiced])
  @@index([lastInvoiceDate])
  @@map("clients")
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String
  price        Float
  currency     String
  cost         Float         @default(0)
  costCurrency String
  isActive     Boolean       @default(true)
  companyId    Int?
  vendorId     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoiceItems InvoiceItem[]
  vendor       Vendor?       @relation(fields: [vendorId], references: [id])
  company      Company?      @relation(fields: [companyId], references: [id])

  @@index([companyId, createdAt])
  @@index([isActive, createdAt])
  @@index([name])
  @@index([currency])
  @@index([vendorId])
  @@index([companyId, isActive])
  @@index([price])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("products")
}

model Vendor {
  id                    String    @id @default(cuid())
  companyId             Int
  companyName           String
  contactPerson         String?
  contactEmail          String
  phone                 String?
  website               String?
  paymentTerms          String
  currency              String    @default("USD")
  paymentMethod         String
  billingAddress        String?
  itemsServicesSold     String?
  notes                 String?
  companyRegistrationNr String?
  vatNr                 String?
  vendorCountry         String?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  products              Product[]
  company               Company   @relation(fields: [companyId], references: [id])

  @@index([companyId, createdAt])
  @@index([isActive, createdAt])
  @@index([companyName])
  @@index([contactEmail])
  @@index([currency])
  @@index([paymentMethod])
  @@index([companyId, isActive])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("vendors")
}

model Invoice {
  id                    String                 @id @default(cuid())
  invoiceNumber         String                 @unique
  clientName            String
  clientEmail           String
  clientAddress         String?
  subtotal              Float
  currency              String
  status                String                 @default("DRAFT")
  dueDate               DateTime
  issueDate             DateTime
  paidDate              DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  template              String                 @default("professional")
  taxRate               Float                  @default(0)
  taxAmount             Float                  @default(0)
  totalAmount           Float
  fromCompanyId         Int
  notes                 String?
  clientId              String?
  items                 InvoiceItem[]
  client                Client?                @relation(fields: [clientId], references: [id])
  company               Company                @relation(fields: [fromCompanyId], references: [id])
  paymentMethodInvoices PaymentMethodInvoice[]
  paymentSources        InvoicePaymentSource[]
  bookkeepingEntries    BookkeepingEntry[]

  @@index([fromCompanyId, createdAt])
  @@index([status, createdAt])
  @@index([clientId, createdAt])
  @@index([invoiceNumber])
  @@index([clientName])
  @@index([clientEmail])
  @@index([currency])
  @@index([dueDate])
  @@index([issueDate])
  @@index([paidDate])
  @@index([totalAmount])
  @@index([fromCompanyId, status])
  @@index([status, dueDate])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  productId   String?
  productName String
  description String
  quantity    Float
  unitPrice   Float
  currency    String
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product? @relation(fields: [productId], references: [id])
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model PaymentMethod {
  id            String                 @id @default(cuid())
  type          String
  name          String
  companyId     Int
  accountName   String?
  bankName      String?
  bankAddress   String?
  iban          String?
  swiftCode     String?
  accountNumber String?
  walletAddress String?
  currency      String
  details       String                 @default("")
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  invoices      PaymentMethodInvoice[]
  company       Company                @relation(fields: [companyId], references: [id])

  @@map("payment_methods")
}

model PaymentMethodInvoice {
  id              String        @id @default(cuid())
  invoiceId       String
  paymentMethodId String
  createdAt       DateTime      @default(now())
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  invoice         Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@unique([invoiceId, paymentMethodId])
  @@map("payment_method_invoices")
}

model InvoicePaymentSource {
  id         String   @id @default(cuid())
  invoiceId  String
  sourceType String   // 'BANK_ACCOUNT', 'DIGITAL_WALLET', 'PAYMENT_METHOD'
  sourceId   String   // References the actual entity ID
  createdAt  DateTime @default(now())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@unique([invoiceId, sourceType, sourceId])
  @@map("invoice_payment_sources")
}

model BankAccount {
  id            String        @id @default(cuid())
  companyId     Int
  bankName      String
  bankAddress   String
  currency      String
  iban          String
  swiftCode     String
  accountNumber String?
  accountName   String
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  notes         String?
  company       Company       @relation(fields: [companyId], references: [id])
  // Removed transactions relation - accountId references are handled at application level

  @@index([companyId, createdAt])
  @@index([isActive, createdAt])
  @@index([bankName])
  @@index([accountName])
  @@index([currency])
  @@index([iban])
  @@index([accountNumber])
  @@index([companyId, isActive])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("bank_accounts")
}

model DigitalWallet {
  id            String        @id @default(cuid())
  companyId     Int
  walletType    String
  walletName    String
  walletAddress String
  currency      String
  currencies    String        @default("")
  description   String
  blockchain    String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  notes         String?
  company       Company       @relation(fields: [companyId], references: [id])
  // Removed transactions relation - accountId references are handled at application level

  @@index([companyId, createdAt])
  @@index([isActive, createdAt])
  @@index([walletType, createdAt])
  @@index([walletName])
  @@index([walletAddress])
  @@index([currency])
  @@index([blockchain])
  @@index([companyId, isActive])
  @@index([companyId, walletType])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("digital_wallets")
}

model BookkeepingEntry {
  id                 String           @id @default(cuid())
  companyId          Int
  type               String           // 'revenue' | 'expense'
  category           String
  subcategory        String?
  description        String?
  amount             Float
  currency           String
  date               DateTime
  reference          String?
  notes              String?
  accountId          String?
  accountType        String?          // 'bank' | 'wallet'
  cogs               Float            @default(0)
  cogsPaid           Float            @default(0)
  vendorInvoice      String?
  isFromInvoice      Boolean          @default(false)
  invoiceId          String?
  chartOfAccountsId  String?
  linkedIncomeId     String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  
  // Relations
  // account            CompanyAccount?  @relation(fields: [accountId], references: [id]) // Removed: accountId stores bank/wallet IDs
  company            Company          @relation(fields: [companyId], references: [id])
  invoice            Invoice?         @relation(fields: [invoiceId], references: [id])
  chartOfAccount     ChartOfAccount?  @relation(fields: [chartOfAccountsId], references: [id])
  linkedIncome       BookkeepingEntry? @relation("LinkedEntries", fields: [linkedIncomeId], references: [id])
  linkedExpenses     BookkeepingEntry[] @relation("LinkedEntries")
  transaction        Transaction?
  
  // Indexes for performance
  @@index([companyId, date])
  @@index([companyId, type, category])
  @@index([companyId, createdAt])
  @@index([type, createdAt])
  @@index([category])
  @@index([description])
  @@index([date])
  @@index([chartOfAccountsId])
  @@map("bookkeeping_entries")
}

model CompanyAccount {
  id              String             @id @default(cuid())
  companyId       Int
  type            String
  name            String
  accountNumber   String?
  currency        String
  startingBalance Float              @default(0)
  currentBalance  Float              @default(0)
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  // entries         BookkeepingEntry[] // Removed: accountId in BookkeepingEntry stores bank/wallet IDs, not CompanyAccount IDs
  company         Company            @relation(fields: [companyId], references: [id])
  // Removed transactions relation - accountId references are handled at application level

  @@unique([companyId, type, name])
  @@map("company_accounts")
}

model Transaction {
  id                   String                  @id @default(cuid())
  companyId            Int
  date                 DateTime
  paidBy               String
  paidTo               String
  netAmount            Float
  incomingAmount       Float?
  outgoingAmount       Float?
  currency             String
  baseCurrency         String
  baseCurrencyAmount   Float
  exchangeRate         Float?
  accountId            String
  accountType          String
  reference            String?
  category             String?
  subcategory          String?
  description          String?
  notes                String?
  tags                 String                  @default("")
  linkedEntryId        String?                 @unique
  linkedEntryType      String?
  status               String                  @default("CLEARED")
  reconciliationStatus String                  @default("UNRECONCILED")
  statementDate        DateTime?
  statementReference   String?
  isRecurring          Boolean                 @default(false)
  recurringPattern     String?
  parentTransactionId  String?
  approvalStatus       String                  @default("APPROVED")
  approvedBy           String?
  approvedAt           DateTime?
  isDeleted            Boolean                 @default(false)
  deletedAt            DateTime?
  deletedBy            String?
  createdBy            String?
  updatedBy            String?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  attachments          TransactionAttachment[]
  updatedByUser        User?                   @relation("UpdatedByUser", fields: [updatedBy], references: [id])
  createdByUser        User?                   @relation("CreatedByUser", fields: [createdBy], references: [id])
  parentTransaction    Transaction?            @relation("TransactionHierarchy", fields: [parentTransactionId], references: [id])
  childTransactions    Transaction[]           @relation("TransactionHierarchy")
  linkedEntry          BookkeepingEntry?       @relation(fields: [linkedEntryId], references: [id])
  company              Company                 @relation(fields: [companyId], references: [id])

  // Note: accountId is kept as a simple string field without foreign key constraints
  // This allows it to reference different account types (bank, wallet, company) based on accountType
  // The application logic ensures data integrity instead of database constraints

  @@index([companyId, date])
  @@index([companyId, accountId])
  @@index([companyId, status, reconciliationStatus])
  @@index([companyId, category, subcategory])
  @@index([date, currency])
  @@index([accountId, status])
  @@index([linkedEntryId])
  @@index([isDeleted, deletedAt])
  @@map("transactions")
}

model TransactionAttachment {
  id            String      @id @default(cuid())
  transactionId String
  fileName      String
  filePath      String
  fileSize      Int
  mimeType      String
  uploadedBy    String?
  createdAt     DateTime    @default(now())
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@map("transaction_attachments")
}

model InitialBalance {
  id          String   @id @default(cuid())
  accountId   String
  accountType String   // 'bank' | 'wallet'
  amount      Float
  currency    String
  companyId   Int
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])

  @@unique([accountId, accountType, currency])
  @@index([companyId])
  @@index([accountType])
  @@index([currency])
  @@map("initial_balances")
}


model CalendarEvent {
  id               String               @id @default(cuid())
  title            String
  description      String               @default("")
  date             DateTime
  time             String
  type             String               @default("OTHER")
  priority         String               @default("MEDIUM")
  company          String?
  participants     String               @default("")
  companyId        Int?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  googleEventId    String?              @unique
  googleCalendarId String?
  syncStatus       String               @default("LOCAL")
  lastSyncedAt     DateTime?
  googleEtag       String?
  location         String?
  endTime          String?
  isAllDay         Boolean              @default(false)
  recurrence       String?
  createdByUserId  String?
  timezoneId       String               @default("UTC")
  eventScope       String               @default("personal")
  isAutoGenerated  Boolean              @default(false)
  createdBy        User?                @relation(fields: [createdByUserId], references: [id])
  companyRecord    Company?             @relation(fields: [companyId], references: [id])
  syncLogs         GoogleCalendarSync[]
  notes            Note[]

  @@index([createdAt, id])
  @@index([date, createdAt, id])
  @@index([type, createdAt, id])
  @@index([priority, createdAt, id])
  @@index([companyId, createdAt, id])
  @@index([date, type, createdAt, id])
  @@index([companyId, date, createdAt, id])
  @@index([type])
  @@index([priority])
  @@index([date])
  @@index([googleEventId])
  @@index([syncStatus])
  @@index([createdByUserId])
  @@map("calendar_events")
}

model GoogleCalendarSync {
  id           String         @id @default(cuid())
  userId       String
  eventId      String?
  syncType     String         @default("PULL")
  syncStatus   String         @default("PENDING")
  errorMessage String?
  syncedAt     DateTime       @default(now())
  event        CalendarEvent? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventId])
  @@index([syncType])
  @@index([syncStatus])
  @@index([syncedAt])
  @@map("google_calendar_syncs")
}

model AutoGeneratedEventSync {
  id              String   @id @default(cuid())
  originalEventId String
  googleEventId   String   @default("")
  userId          String
  title           String
  date            DateTime
  syncedAt        DateTime @default(now())
  isDeleted       Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([originalEventId, userId])
  @@index([userId])
  @@index([isDeleted])
  @@index([date])
  @@map("auto_generated_event_syncs")
}

model Note {
  id             String         @id @default(cuid())
  title          String
  content        String
  eventId        String?
  companyId      Int?
  tags           String         @default("")
  priority       String         @default("MEDIUM")
  isStandalone   Boolean        @default(true)
  isCompleted    Boolean        @default(false)
  completedAt    DateTime?
  isAutoArchived Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  company        Company?       @relation(fields: [companyId], references: [id])
  event          CalendarEvent? @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([createdAt, id])
  @@index([eventId, createdAt, id])
  @@index([companyId, createdAt, id])
  @@index([priority, createdAt, id])
  @@index([isCompleted, createdAt, id])
  @@index([isStandalone, createdAt, id])
  @@index([companyId, isCompleted, createdAt, id])
  @@index([eventId, isCompleted, createdAt, id])
  @@index([priority])
  @@index([isCompleted])
  @@index([isStandalone])
  @@map("notes")
}

model BusinessCard {
  id          String   @id @default(cuid())
  companyId   Int
  personName  String   @default("")
  position    String   @default("")
  personEmail String   @default("")
  personPhone String   @default("")
  qrType      String   @default("WEBSITE")
  qrValue     String   @default("")
  template    String   @default("MODERN")
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, createdAt, id])
  @@index([isArchived, createdAt, id])
  @@index([template, createdAt, id])
  @@index([createdAt, id])
  @@map("business_cards")
}

model ChartOfAccount {
  id               String   @id @default(cuid())
  code             String   @unique
  name             String
  type             String   // AccountType: 'Assets' | 'Liability' | 'Equity' | 'Revenue' | 'Expense'
  category         String   // AccountCategory
  subcategory      String?  // AccountSubcategory
  vat              String   // TaxType (VAT/Sales Tax/GST)
  relatedVendor    String?
  accountType      String   // 'Detail' | 'Header'
  isActive         Boolean  @default(true)
  balance          Float    @default(0)
  classification   String?
  lastActivity     DateTime?
  transactionCount Int      @default(0)
  ifrsReference    String?
  companyId        Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  company          Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  bookkeepingEntries BookkeepingEntry[]

  @@index([code])
  @@index([type, createdAt, id])
  @@index([category, createdAt, id])
  @@index([isActive, createdAt, id])
  @@index([companyId, createdAt, id])
  @@index([createdAt, id])
  @@map("chart_of_accounts")
}

model TaxTreatment {
  id              String   @id @default(cuid())
  code            String   @unique
  name            String
  description     String
  rate            Float    // Tax percentage (0-100)
  category        String   // TaxCategory: 'standard' | 'reduced' | 'exempt' | 'special' | 'acquisition' | 'margin' | 'property'
  applicability   String   // JSON array of TaxApplicability: ['sales', 'purchases', 'assets', 'services', 'import', 'export']
  isActive        Boolean  @default(true)
  isDefault       Boolean  @default(false) // Whether this is a system default treatment
  companyId       Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([category, createdAt, id])
  @@index([isActive, createdAt, id])
  @@index([companyId, createdAt, id])
  @@index([rate, createdAt, id])
  @@index([createdAt, id])
  @@map("tax_treatments")
}

model ManualCashflowEntry {
  id          String   @id @default(cuid())
  companyId   Int
  accountId   String
  accountType String   // 'bank' | 'wallet'
  type        String   // 'inflow' | 'outflow'
  amount      Float
  currency    String
  period      String   // Format: YYYY-MM
  description String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, period])
  @@index([companyId, accountId])
  @@index([companyId, type])
  @@index([companyId, createdAt])
  @@index([accountId, period])
  @@index([accountType])
  @@index([type])
  @@index([period])
  @@index([createdAt])
  @@map("manual_cashflow_entries")
}

model CurrencyRate {
  id          String   @id @default(cuid())
  code        String   @unique  // Currency code (USD, EUR, BTC, ETH, etc.)
  name        String              // Display name
  rate        Float               // Exchange rate value
  type        String              // 'fiat' | 'crypto'
  source      String   @default("manual")  // 'manual' | 'api' | 'system'
  isActive    Boolean  @default(true)
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([type, isActive])
  @@index([code, type])
  @@index([lastUpdated])
  @@index([source])
  @@index([isActive])
  @@map("currency_rates")
}

