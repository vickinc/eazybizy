#!/usr/bin/env node

/**
 * Simple script to generate anniversary events for a specific company
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function generateAnniversaryForCompany(companyId) {
  try {
    console.log(`üîç Generating anniversary events for company ID: ${companyId}`);
    
    // Get the company details
    const company = await prisma.company.findUnique({
      where: { id: parseInt(companyId) },
      select: {
        id: true,
        tradingName: true,
        registrationDate: true
      }
    });

    if (!company) {
      console.log(`‚ùå Company with ID ${companyId} not found`);
      return;
    }

    console.log(`üìù Company: ${company.tradingName}`);
    console.log(`üìÖ Registration Date: ${company.registrationDate}`);

    if (!company.registrationDate) {
      console.log(`‚ö†Ô∏è  Company has no registration date, skipping`);
      return;
    }

    // Check if anniversary events already exist
    const existingEvents = await prisma.calendarEvent.findMany({
      where: {
        companyId: company.id,
        isAutoGenerated: true,
        type: 'ANNIVERSARY'
      },
      select: { id: true }
    });

    if (existingEvents.length > 0) {
      console.log(`‚ÑπÔ∏è  Company already has ${existingEvents.length} anniversary events`);
      return;
    }

    // Generate anniversary events using the same logic as the service
    const startDate = new Date();
    const endDate = new Date();
    endDate.setFullYear(endDate.getFullYear() + 2); // Next 2 years

    const regDate = new Date(company.registrationDate);
    const anniversaries = [];

    for (let year = startDate.getFullYear(); year <= endDate.getFullYear(); year++) {
      const anniversaryDate = new Date(year, regDate.getMonth(), regDate.getDate());
      
      // Only include if within range and after registration
      if (anniversaryDate >= startDate && 
          anniversaryDate <= endDate && 
          anniversaryDate >= regDate) {
        
        const yearsOld = year - regDate.getFullYear();
        const eventId = `anniversary-${company.id}-${year}`;
        
        let title, description;
        if (yearsOld === 0) {
          title = `üéâ ${company.tradingName} - Registration Day`;
          description = `Today marks the registration day of ${company.tradingName}! The company was registered on ${regDate.toLocaleDateString('en-GB')}.`;
        } else {
          const suffix = getOrdinalSuffix(yearsOld);
          title = `üéÇ ${company.tradingName} - ${yearsOld}${suffix} Anniversary`;
          description = `Today marks the ${yearsOld}${suffix} anniversary of ${company.tradingName}! The company was registered on ${regDate.toLocaleDateString('en-GB')}.`;
        }

        anniversaries.push({
          id: eventId,
          title,
          description,
          date: anniversaryDate,
          time: '09:00',
          type: 'ANNIVERSARY',
          priority: 'MEDIUM',
          company: company.tradingName,
          companyId: company.id,
          isAutoGenerated: true,
          eventScope: 'company',
          syncStatus: 'LOCAL',
          participants: '[]'
        });
      }
    }

    if (anniversaries.length > 0) {
      console.log(`üìù Creating ${anniversaries.length} anniversary events...`);

      let createdCount = 0;
      for (const anniversary of anniversaries) {
        try {
          await prisma.calendarEvent.create({
            data: anniversary
          });
          console.log(`   ‚úÖ Created: ${anniversary.title}`);
          createdCount++;
        } catch (error) {
          if (error.code === 'P2002') {
            console.log(`   ‚ö†Ô∏è  Event already exists: ${anniversary.title}`);
          } else {
            console.error(`   ‚ùå Error creating ${anniversary.title}:`, error.message);
          }
        }
      }

      console.log(`üéâ Successfully created ${createdCount} anniversary events for ${company.tradingName}`);
    } else {
      console.log(`‚ÑπÔ∏è  No anniversary events needed for the current time range`);
    }

  } catch (error) {
    console.error('‚ùå Script failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

function getOrdinalSuffix(num) {
  const remainder10 = num % 10;
  const remainder100 = num % 100;
  
  if (remainder100 >= 11 && remainder100 <= 13) {
    return 'th';
  }
  
  switch (remainder10) {
    case 1: return 'st';
    case 2: return 'nd'; 
    case 3: return 'rd';
    default: return 'th';
  }
}

// Get company ID from command line argument
const companyId = process.argv[2];

if (!companyId) {
  console.log('‚ùå Please provide a company ID');
  console.log('Usage: node generate-anniversary-for-company.js <companyId>');
  process.exit(1);
}

// Run the script
generateAnniversaryForCompany(companyId);