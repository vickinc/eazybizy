#!/usr/bin/env node

/**
 * Test script for Anniversary Rollover functionality
 * 
 * This script verifies that the smart anniversary rollover system works correctly
 * by checking for passed anniversaries and generating next year's events.
 */

const { PrismaClient } = require('@prisma/client');

async function testAnniversaryRollover() {
  const prisma = new PrismaClient();
  
  try {
    console.log('🧪 Testing Anniversary Rollover Functionality...\n');

    // Get all anniversary events to understand current state
    const allAnniversaryEvents = await prisma.calendarEvent.findMany({
      where: {
        isAutoGenerated: true,
        type: 'ANNIVERSARY'
      },
      include: {
        companyRecord: {
          select: {
            tradingName: true,
            registrationDate: true
          }
        }
      },
      orderBy: [
        { companyId: 'asc' },
        { date: 'asc' }
      ]
    });

    console.log(`📊 Found ${allAnniversaryEvents.length} total anniversary events in database:\n`);

    // Group by company
    const eventsByCompany = {};
    allAnniversaryEvents.forEach(event => {
      const companyId = event.companyId;
      if (!eventsByCompany[companyId]) {
        eventsByCompany[companyId] = [];
      }
      eventsByCompany[companyId].push(event);
    });

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    let totalPassed = 0;
    let totalUpcoming = 0;
    let companiesNeedingRollover = 0;

    for (const [companyId, events] of Object.entries(eventsByCompany)) {
      const companyName = events[0]?.companyRecord?.tradingName || `Company ${companyId}`;
      const passedEvents = events.filter(e => e.date < today);
      const upcomingEvents = events.filter(e => e.date >= today);
      
      console.log(`\n🏢 ${companyName} (ID: ${companyId}):`);
      console.log(`   📅 Total events: ${events.length}`);
      console.log(`   ⏰ Passed events: ${passedEvents.length}`);
      console.log(`   ⏭️  Upcoming events: ${upcomingEvents.length}`);
      
      if (passedEvents.length > 0 && upcomingEvents.length === 0) {
        console.log(`   ⚠️  NEEDS ROLLOVER: No upcoming anniversaries found!`);
        companiesNeedingRollover++;
        
        // Show the latest passed event
        const latestPassed = passedEvents.reduce((latest, current) => 
          current.date > latest.date ? current : latest
        );
        console.log(`   📊 Latest passed: ${latestPassed.title} on ${latestPassed.date.toDateString()}`);
      }

      totalPassed += passedEvents.length;
      totalUpcoming += upcomingEvents.length;
    }

    console.log(`\n📈 Summary:`);
    console.log(`   Total companies with anniversaries: ${Object.keys(eventsByCompany).length}`);
    console.log(`   Total passed events: ${totalPassed}`);
    console.log(`   Total upcoming events: ${totalUpcoming}`);
    console.log(`   Companies needing rollover: ${companiesNeedingRollover}`);

    if (companiesNeedingRollover > 0) {
      console.log(`\n🔄 Testing rollover functionality...`);
      
      // Test the rollover check via API call
      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
      
      try {
        const response = await fetch(`${baseUrl}/api/calendar/anniversary-events/generate`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            // This will trigger rollover for companies that need it
            endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString() // 1 year from now
          })
        });

        if (response.ok) {
          const result = await response.json();
          console.log(`✅ Rollover API test successful:`);
          console.log(`   Created: ${result.created || 0} events`);
          console.log(`   Skipped: ${result.skipped || 0} events`);
          console.log(`   Message: ${result.message || 'No message'}`);
        } else {
          console.log(`❌ Rollover API test failed: ${response.status} ${response.statusText}`);
          const errorText = await response.text();
          console.log(`   Error: ${errorText}`);
        }
      } catch (fetchError) {
        console.log(`⚠️  Could not test rollover API (server may not be running): ${fetchError.message}`);
        console.log(`   This is normal if the development server is not running.`);
      }
    } else {
      console.log(`\n✅ No companies currently need anniversary rollover.`);
      console.log(`   All companies have upcoming anniversary events scheduled.`);
    }

    console.log(`\n🎯 Test completed! The rollover functionality will:`);
    console.log(`   1. Automatically trigger when calendar or company data is accessed`);
    console.log(`   2. Generate next year's anniversary events for companies with passed anniversaries`);
    console.log(`   3. Use smart caching to avoid excessive database queries`);
    console.log(`   4. Work without requiring any cron jobs or scheduled tasks`);

  } catch (error) {
    console.error('❌ Test failed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Run the test if this script is executed directly
if (require.main === module) {
  testAnniversaryRollover()
    .then(() => {
      console.log('\n🏁 Anniversary rollover test completed successfully!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n💥 Anniversary rollover test failed:', error);
      process.exit(1);
    });
}

module.exports = { testAnniversaryRollover };